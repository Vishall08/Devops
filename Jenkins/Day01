
---

## **1. What is Jenkins?**

Jenkins is an **open-source automation server** primarily used for **Continuous Integration (CI)** and **Continuous Delivery/Deployment (CD)**.

* **CI (Continuous Integration):**
  Automatically integrates code changes from multiple developers into a shared repository, builds the project, and runs tests.

* **CD (Continuous Delivery/Deployment):**
  Automatically delivers code to **staging or production** environments after CI passes.

---

## **2. Why Use Jenkins?**

* Automates **build, test, and deployment** pipelines.
* Integrates with **GitHub, GitLab, Docker, Kubernetes, AWS, etc.**
* Supports **plugins** for almost any DevOps tool.
* Provides **real-time monitoring** of build status and logs.
* Reduces **manual repetitive tasks** in deployment.

---

## **3. Step-by-Step Explanation of Setup**

### **Step 1: Launch EC2 and Install Docker**

1. **Start an EC2 instance** (Amazon Linux/Ubuntu).
2. Install Docker:

   ```bash
   sudo yum install docker -y        # For Amazon Linux
   sudo service docker start         # Start Docker service
   ```

   Docker is needed to run Jenkins as a **container**.

---

### **Step 2: Create Jenkins Volume**

```bash
mkdir jenkinsvolume
```

* **Why?** Jenkins stores job configurations, plugins, and credentials in `/var/jenkins_home`.
* Mounting a volume ensures **data persistence** even if the container is removed.

---

### **Step 3: Run Jenkins in Docker**

```bash
sudo docker run -d --name jenkins \
-v /home/ec2-user/jenkinsvolume:/var/jenkins_home \
-p 8080:8080 jenkins/jenkins
```

* `-d` → Detached mode (run in background).
* `--name jenkins` → Assigns container name.
* `-v` → Mount local folder to container for data persistence.
* `-p 8080:8080` → Map container port 8080 to EC2 port 8080.
* `jenkins/jenkins` → Official Jenkins image.

Check if the container is running:

```bash
docker ps
```

---

### **Step 4: Access Jenkins Web UI**

1. **Add 8080 port** in EC2 Security Group → Custom TCP Rule.
2. Open `http://<EC2-Public-IP>:8080` in a browser.
3. Jenkins asks for an **Administrator password** located at:

   ```bash
   docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
   ```
4. Install **Suggested Plugins** → Provides Git, GitHub, Pipeline, etc.

---

### **Step 5: Create First Jenkins Job**

* **New Item → Freestyle Project**
* Configure:

  1. **Source Code Management (SCM):** Add GitHub repository URL.
  2. **Build Triggers:**

     * Select **GitHub hook trigger for GITScm polling**.
  3. **Build Steps:**

     * Add **Execute Shell** step:

       ```bash
       echo "Build Success"
       ```
  4. **Save → Build Now**

---

### **Step 6: Setup GitHub Webhook**

1. Go to **GitHub Repo → Settings → Webhooks → Add Webhook**
2. **Payload URL:**

   ```
   http://<EC2-Public-IP>:8080/github-webhook/
   ```
3. **Content type:** `application/json`
4. Disable SSL verification (for testing).
5. Now, **push any commit** → Jenkins will automatically trigger the job.

---

## **7. Important Jenkins Topics to Learn**

Here are some **core topics** you should focus on as a beginner:

### **1. Jenkins Job Types**

* **Freestyle Project:** Simple job for builds & scripts.
* **Pipeline Job:** Code-based pipelines using `Jenkinsfile`.
* **Multibranch Pipeline:** Automatically detects multiple Git branches.

### **2. Jenkins Pipelines**

* **Declarative vs Scripted Pipelines**.
* **Stages & Steps:** Define build, test, and deploy stages.
* Example Declarative Pipeline:

  ```groovy
  pipeline {
      agent any
      stages {
          stage('Build') {
              steps {
                  echo 'Building...'
              }
          }
          stage('Test') {
              steps {
                  echo 'Testing...'
              }
          }
          stage('Deploy') {
              steps {
                  echo 'Deploying...'
              }
          }
      }
  }
  ```

### **3. Build Triggers**

* **Poll SCM:** Checks Git repo for changes periodically.
* **Webhooks:** Immediate trigger from GitHub/GitLab.
* **Scheduled Cron Jobs:** For nightly builds.

### **4. Jenkins Plugins**

* Git Plugin
* GitHub Integration
* Docker Plugin
* Pipeline Plugin
* Email & Slack Notifications

### **5. Jenkins with Docker**

* Run builds inside Docker containers.
* Use **Docker agents** for isolated build environments.

### **6. Jenkinsfile**

* Store CI/CD pipeline as code in the repository.
* Enables **version-controlled pipeline**.

---

## **Why Jenkins is Critical in DevOps**

* Reduces **manual deployments**.
* Improves **code quality** via automated testing.
* Speeds up **release cycles**.
* Enables **CI/CD best practices** for production-ready workflows.

---


